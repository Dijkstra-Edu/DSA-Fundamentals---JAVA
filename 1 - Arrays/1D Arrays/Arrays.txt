Initialize Array:

int[] name = new int[_size_];
Arrays.sort(arr) - sorts array using quick sort

Print Array as String:
System.out.println(Arrays.toString(_array_name_)); 

Get Max and MIN:

int maxVal = Arrays.stream(piles).max().getAsInt();
int minVal = Arrays.stream(piles).min().getAsInt();

Array to ArrayList: List<String> al = new ArrayList<String>(Arrays.asList(geeks));
(or)
Collections.addAll(_ArrayList_name_ , _array_name_)
(or)
for (String geek : geeks)
    al.add(geek);

ArrayList to Arrys: 
int [] arr = new int[al.size()];
arr = al.toArray(arr);
(or)
for (int i = 0; i < al.size(); i++)
            arr[i] = al.get(i);

Initialize Array with 0's: Integer[] arr = Collections.nCopies(3, 42).toArray(new Integer[0]);

int[] array = new int[] {1, 2, 3, 4, 5};
int[] subArray = Arrays.copyOfRange(array, 0, 2); //Does it in O(n) time

Some Array Functions (From java.util.Arrays; class):
asList() - Returns a fixed-size list backed by the specified Arrays
binarySearch() - Searches for the specified element in the array with the help of the Binary Search Algorithm
binarySearch(array, fromIndex, toIndex, key, Comparator) - Searches a range of the specified array for the specified object using the Binary Search Algorithm
compare(array 1, array 2) - Compares two arrays passed as parameters lexicographically.
copyOf(originalArray, newLength) - Copies the specified array, truncating or padding with the default value (if necessary) so the copy has the specified length.
deepEquals(Object[] a1, Object[] a2) - Returns true if the two specified arrays are deeply equal to one another.
equals(array1, array2) - Checks if both the arrays are equal or not.
fill(originalArray, fillValue) - Assigns this fill value to each index of this arrays.
mismatch(array1, array2) - Finds and returns the index of the first unmatched element between the two specified arrays.
setAll(originalArray, functionalGenerator) - Sets all the elements of the specified array using the generator function provided. 
sort(originalArray) - Sorts the complete array in ascending order. 
sort(originalArray, fromIndex, endIndex) - Sorts the specified range of array in ascending order.
spliterator(originalArray) - Returns a Spliterator covering all of the specified Arrays.
spliterator(originalArray, fromIndex, endIndex) - Returns a Spliterator of the type of the array covering the specified range of the specified arrays.
stream(originalArray) - Returns a sequential stream with the specified array as its source.
toString(originalArray) - It returns a string representation of the contents of this array. The string representation consists of a list of the array’s elements, enclosed in square brackets (“[]”). Adjacent elements are separated by the characters a comma followed by a space. Elements are converted to strings as by String.valueOf() function.