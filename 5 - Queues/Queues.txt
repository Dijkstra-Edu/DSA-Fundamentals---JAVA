Queue:
 - FIFO - First in First out
 - Insert called ENQUEUE (last element added), Delete is called DEQUEUE (first element removed)

 In Java; 
 // LinkedList implementation of Queue
Queue<String> animal1 = new LinkedList<>();

// Array implementation of Queue
Queue<String> animal2 = new ArrayDeque<>();

// Priority Queue implementation of Queue
Queue<String> animal 3 = new PriorityQueue<>();

Methods:
add() - Inserts the specified element into the queue. If the task is successful, add() returns true, if not it throws an exception.
offer() - Inserts the specified element into the queue. If the task is successful, offer() returns true, if not it returns false.
element() - Returns the head of the queue. Throws an exception if the queue is empty.
peek() - Returns the head of the queue. Returns null if the queue is empty.
remove() - Returns and removes the head of the queue. Throws an exception if the queue is empty.
poll() - Returns and removes the head of the queue. Returns null if the queue is empty.

Other Methods (Common to Collections Interface)
add(int index, element) - This method is used to add an element at a particular index in the queue. When a single parameter is passed, it simply adds the element at the end of the queue.
addAll(int index, Collection collection) - This method is used to add all the elements in the given collection to the queue. When a single parameter is passed, it adds all the elements of the given collection at the end of the queue.
size() - This method is used to return the size of the queue.
clear() - This method is used to remove all the elements in the queue. However, the reference of the queue created is still stored.
remove() - This method is used to remove the element from the front of the queue.
remove(int index) - This method removes an element from the specified index. It shifts subsequent elements(if any) to left and decreases their indexes by 1.
remove(element) - This method is used to remove and return the first occurrence of the given element in the queue.
get(int index) - This method returns elements at the specified index.
set(int index, element) - This method replaces elements at a given index with the new element. This function returns the element which was just replaced by a new element.
indexOf(element) - This method returns the first occurrence of the given element or -1 if the element is not present in the queue.
lastIndexOf(element) - This method returns the last occurrence of the given element or -1 if the element is not present in the queue.
equals(element) - This method is used to compare the equality of the given element with the elements of the queue.
hashCode() - This method is used to return the hashcode value of the given queue.
isEmpty() - This method is used to check if the queue is empty or not. It returns true if the queue is empty, else false.
contains(element) - This method is used to check if the queue contains the given element or not. It returns true if the queue contains the element.
containsAll(Collection collection) - This method is used to check if the queue contains all the collection of elements.
sort(Comparator comp) - This method is used to sort the elements of the queue on the basis of the given comparator.

Iterating Queue:
Iterator iterator = q.iterator(); 
while (iterator.hasNext()) {
    System.out.print(iterator.next() + " ");

Types of Queues: 
1) PriorityQueue: PriorityQueue class which is implemented in the collection framework provides us a
 way to process the objects based on the priority.

2) Linked List: For creating Linear Queues,Due to the dynamicity and ease of insertions and deletions,
 they are preferred over the arrays or queues.

3) PriorityBlockingQueue: It is to be noted that both the implementations, the PriorityQueue and 
 LinkedList are not thread-safe. PriorityBlockingQueue is one alternative implementation if thread-safe implementation is needed.

Application: BFS