BINARY SEARCH:
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-

 - process of searching for a specific value in an ordered collection.
 - Time Complexity: O(log(n)) {Best Case: O(1), Worst Case: O(log(n)), Average Case: O(log(n))}, Space Complexity: O(1)

Binary Search is generally composed of 3 main sections:
 - Pre-processing - Sort if collection is unsorted.
 - Binary Search - Using a loop or recursion to divide search space in half after each comparison.
 - Post-processing - Determine viable candidates in the remaining space.

3 MAIN TEMPLATES to BINARY SEARCH PROBLEMS:
1) Case 1: Most Standard Template =>

int binarySearch(int[] nums, int target){
  if(nums == null || nums.length == 0)
    return -1;
  int left = 0, right = nums.length - 1;
  while(left <= right){
    int mid = left + (right - left) / 2;
    if(nums[mid] == target){ return mid; }
    else if(nums[mid] < target) { left = mid + 1; }
    else { right = mid - 1; }
  }
  return -1;
}

 - Most basic and elementary form of Binary Search
 - Search Condition can be determined without comparing to the element's neighbors (or use specific elements around it)
 - No post-processing required because at each step, you are checking to see if the element has been found. If you reach the end, then you know the element is not found

Initial Condition: left = 0, right = length-1
Termination: left > right
Searching Left: right = mid-1
Searching Right: left = mid+1

2) Case 2: Advanced Binary Search

int binarySearch(int[] nums, int target){
  if(nums == null || nums.length == 0)
    return -1;

  int left = 0, right = nums.length;
  while(left < right){
    int mid = left + (right - left) / 2;
    if(nums[mid] == target){ return mid; }
    else if(nums[mid] < target) { left = mid + 1; }
    else { right = mid; }
  }

  if(left != nums.length && nums[left] == target) return left;
  return -1;
}

- Advanced form of Binary Search. It is used to search for an element 
or condition which requires accessing the current index and its immediate 
right neighbor's index in the array.

 - Search Condition needs to access the element's immediate right neighbor
 - Use the element's right neighbor to determine if the condition is met and decide whether to go left or right
 - Guarantees Search Space is at least 2 in size at each step
 - Post-processing required. Loop/Recursion ends when you have 1 element left. Need to assess if the remaining element meets the condition.

Initial Condition: left = 0, right = length
Termination: left == right
Searching Left: right = mid
Searching Right: left = mid+1

3) Case 3: Another Advanced Binary Search

int binarySearch(int[] nums, int target) {
    if (nums == null || nums.length == 0)
        return -1;

    int left = 0, right = nums.length - 1;
    while (left + 1 < right){
        // Prevent (left + right) overflow
        int mid = left + (right - left) / 2;
        if (nums[mid] == target) {
            return mid;
        } else if (nums[mid] < target) {
            left = mid;
        } else {
            right = mid;
        }
    }
    if(nums[left] == target) return left;
    if(nums[right] == target) return right;
    return -1;
}

unique form of Binary Search. It is used to search for an element or condition which requires accessing the current index and its immediate left and right neighbor's index in the array.

- An alternative way to implement Binary Search
- Search Condition needs to access element's immediate left and right neighbors
- Use element's neighbors to determine if condition is met and decide whether to go left or right
- Gurantees Search Space is at least 3 in size at each step
- Post-processing required. Loop/Recursion ends when you have 2 elements left. Need to assess if the remaining elements meet the condition.

Initial Condition: left = 0, right = length-1
Termination: left + 1 == right
Searching Left: right = mid
Searching Right: left = mid